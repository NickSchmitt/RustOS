commit fb5e06698ffd27add7f942088c856258e2068d55
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Apr 25 22:27:12 2021 -0700

    Write test to demonstrate drawback of Bump Allocator
    
    With the bump allocator, deallocated memory can only be reused once all memory is deallocated. If there is any allocated memory, none of the previously deallocated memory can be accessed, because the allocation pointer progresses ever rightward over the address space, never considering any leftward deallocated addresses for reuse.
    
    To demonstrate this with a test, we create a single long-lived heap allocation, one that we do not deallocate. Then, we create a for loop in which we continuously allocate and deallocate on each iteration. We should want a heap allocator to reuse previously deallocated memory but since a Bump Allocator progresses rightward throughout the address space as long as some memory is allocated, it will continue to do this given that our long-lived initial heap allocation remains. Thus, we run out of memory.

commit c4acdbb65634753cec28dbee8dea02001182bbf3
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Apr 25 21:55:28 2021 -0700

    Update the ALLOCATOR static with the new Bump Allocator
    
    We replace the linked list allocator with our new bump allocator. Both BumpAllocator::new and Locked::new were declared as const functions because only functions that are const can be called from const contexts, one of which being the initializer of statics, which our ALLOCATOR is.

commit 340a355870a2bd8819f98b648be9c2f1d718c0f5
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Apr 25 12:00:32 2021 -0700

    Implement address alignment with bitmask
    
    If align is a power of two, only one bit is set. We can use !(align-1) to clear all bits lower than the set bit and set the bit and all greater bits. Then the bitwise AND on any address will ensure that the new address will be a multiple of the alignment value, i.e. it will be properly aligned. Finally, to ensure that the address begins not at the last used aligned value of memory, but instead the next aligned value of memory, we add align-1 to the bitwise and operation.

commit edde300646401609c3a2d517b0d03687284f635d
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Apr 24 00:12:44 2021 -0700

    Implement address alignment by computing remainder
    
    We find the remainder of current address modulo alignment value, then align by removing the remainder then beginning at the next alignment.

commit 0381e1a8117176c36421452d45c819f4e587ee0f
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Apr 24 00:04:58 2021 -0700

    Implement Locked<BumpAllocator>
    
    With our new Locked Wrapper type we can now get a mutable reference to the allocator during allocation and dellaocation.

commit 51961c457c5a162ea9fd1d3e06f646991408d289
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Fri Apr 23 22:53:40 2021 -0700

    Fold ChangeLog lines

commit 4d923b96334a03c348ff438bd2e1ef5d561a8f22
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Fri Apr 23 01:38:26 2021 -0700

    Attempting to implement GlobalAlloc trait on BumpAllocator
    
    All heap allocators must implement GlobalAlloc which has required methods alloc and dealloc. This fails due to GlobalAlloc being limited to immutable &self references, which conflicts with our bump allocator's need to update the next and allocations struct fields for each new bump allocation.

commit 041972e13a14319cd8553e22e0d0aa95ef5432e2
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Fri Apr 23 01:31:12 2021 -0700

    Create simple bump allocator
    
    To begin our allocator design, we start with the simple bump allocator. A bump allocator allocates memory linearly in contiguous segments through the heap, and deallocates all at once.
    
    The BumpAllocator struct has a next variable that keeps track of the next available block of memory. We maintain a structure of separating the new and init functions so as to maintain the structure used previously in the linked_list_allocator crate. The allocations variable counts the allocations.

commit a0deda3a0d628fb507740f522fe844efcb5eaca0
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Apr 3 00:44:35 2021 -0700

    Write three test cases for heap allocation
    
    The first test simply allocates values to the heap using a Box then asserts that the dereferenced values are equal to the integeres passed into Box::new(). The second test pushes every integer up to 1000 into a dynamically sized array (vector), then asserts that the iterated sum of the vector is equal to the nth partial sum to prove the values were allocated correctly to the vector. Finally, the third test creates boxes so as to exceed the heap size, which proves the allocator is reusing freed memory for subsequent allocations."

commit af0573b6fba0c6079d46871a9385007bc35e4c10
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Apr 3 00:36:04 2021 -0700

    Create integration test for new allocator.
    
    To ensure our allocation code works, we create a new test file, reusing our test running and panic handler from lib.rs, and implementing a similar function to kernel_main, calling test_main unconditionally."

commit 2d923cc9a9e11b19ed1aea36f451679819ebd6ca
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Apr 3 00:26:53 2021 -0700

    Use allocation and collection types of the alloc crate
    
    With the allocator initialized, we now demonstrate its use by allocating a value on the heap with Box::new(), we can create a dynamically sized vector with alloc::vec::Vec and  demonstrate a reference counting vector with alloc::rc::Rc. Box and Vec's location on the heap is evidenced by their addresses at 0x_4444_4444_*."

commit 03ae55806480adde91b0051525df92de1ccac017
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Apr 3 00:20:28 2021 -0700

    Initialize the allocator after creating the heap
    
    In the init_heap function, we map all heap pages to physical frames, then we initialize the allocator. We use lock to get an exclusive reference to the wrapped Heap instance, the initialize with heap start and size."

commit f6fbfd17c8a9853e5a352f71bd4d5344dd568c8f
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Apr 3 00:15:19 2021 -0700

    Use linked_list_allocator crate for the global allocator
    
    Leaving a complex allocator implementation for next time, we begin with using a crate. The struct to be used for the global allocator is LockedHeap, which uses a spinlock to manage multiple threads accessing the allocator."

commit 5df07099ef1b668bf238b4b54fa8e4272ea3abcc
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Apr 1 15:20:26 2021 -0700

    With the virtual memory range not yet mapped, we create a heap initialization function that uses the Mapper API, taking a mutable reference to a mapper and frame_allocator limited to Size4KiB pages. We first create the page range by creating heap start and end page values then passing them to a range_inclusive function. Then we map each page by first allocating a physical frame (calling a map error and returning early if there are no more frames left), then setting present and writable flags for heap memory, then finally using map_to to create the mapping, flushing the translation lookaside buffer to ensure that any old mapping this page might have in the cache is removed, so that the newest mapping is used. With the function set up, we can call it from kernel_main.

commit 3ae78f570cab555b388198a4fe96922a838b6236
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Apr 1 14:57:21 2021 -0700

    Defining a virtual memory range, with an address at HEAP_START and a size of 100 sets of 1024 bytes, i.e. 100KiB.

commit 0efd48a0fe69f944c60e3b9f5ea8b814ac1c349b
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 28 21:11:59 2021 -0700

    Specifying which allocator instance the compiler should use as the global heap allocator with the #[global_allocator] attribute, creating the handler function for allocation errors, and using a Box for dynamic heap allocation.

commit 12a70d0d84f575951a6447a9e9173bc7f1ecdea4
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 27 21:01:22 2021 -0700

    Implementing the bare minimum for an allocator. We create a unit struct Dummy, then impl GlobalAlloc for it with GlobalAlloc's required functions, alloc and dealloc. Right now our dummy allocator's alloc function always returns a null pointer, which is used as an error instead of an explicit error for reasons related to wrapping existing system allocators.

commit 4dd1bc5a6976e2fdc4e52b92d94af846b30306b6
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Mar 25 20:42:48 2021 -0700

    Beginning to add heap allocation to the kernel. Local and static variables have a fixed size, they can't dynamically grow. Dynamic heap allocation allows us to do this with allocation and deallocation. We will be using dynamic memory for collection types. We begin by adding a dependency on alloc and telling cargo to recompile it from source. We get build errors because it requires a heap allocator described by the GlobalAlloc trait, as well as a handler function for alloc errors.

commit ebfd12b17bcbd485e4e7c9f6df122c385f108594
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Mar 17 18:46:44 2021 -0700

    Cleanup

commit 621970800ef07fcf1dddd05d25840c0f6f1c1dcc
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Mar 17 18:41:32 2021 -0700

    Now replacing EmptyFrameAllocator with BootInfoFrameAllocator in kernel_main, New prints successfully on the screen. Map_to allocates an unused frame from frame_allocator, zero the frame to create an empty page table, map the entry of the higher level table to that frame and continue to the next table level.

commit a9241878a83c0c680fc38c89f8f45f8c55307505
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Mar 17 18:36:11 2021 -0700

    We can now implement the FrameAllocator for BootInfoFrameAllocator. We get the usable frames, then nth() gets the frame with index self.next, incrementing self.next before returning the frame. This implementation recreates usable_frame allocator every allocation and is therefore suboptimal. Ideally the iterator would be a struct field and thus wouldn't need the nth method, calling next on each allocation. Impl Trait types cannot be stored in a struct field, however. It may be possible in the future with named existential types.

commit 5bf0b66aba197793023133a1935efd603afb7f6a
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Mar 17 18:29:52 2021 -0700

    Creating a usable_frames method to convert the memory map into an iterator of usable frames.
    1) Call iter to convert the memory map to an iterator of MemoryRegions
    2) Filter out all reserved or unavailable regions
    3) Map the iterator to one of address ranges
    4) Flat Map the address ranges to 4096 bye frame addresses
    5) Convert the addresses to PhysFrames for the return type

commit 155bc9a892349c71d8aaf971aa3696f2c3122196
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 15 19:07:13 2021 -0700

    To create new page tables we need to replace our Empty Frame Allocator with a proper frame allocator. We use the memory_map passed by the bootloader as part of the BootInfo struct. The BootInfoFrameAllocator struct we create includes a field for the memory map and a field for the next frame.

commit 9f9389ea4ef303fdcd6a3f6a21e8b117d43cdb64
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 14 19:23:20 2021 -0700

    Testing mapping with a page for which no level 1 table exists, we get a FrameAllocationFailed error thanks to our dummy EmptyFrameAllocator.

commit 49ea1e12db33ac4eb952a8c13cee43e9df9f1857
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 14 19:20:57 2021 -0700

    Since our EmptyFrameAllocator cannot create additional frames as needed, we'll need to map to an address in which no new frames are needed. Depending on the virtual page chosen, we may need to create level 3, 2, and 1 page tabless. However, we do know that the bootloader loads itself into the first megabyte of virtual address space, so no new page tables are required. The first megabyte of virtual address space won't require additional tables, however, because the bootloader loads itself there. This will therefore work for our EmptyFrameAllocator. We map the page at address 0 to the VGA buffer by passing page, mapper (an Offset Page Table) and our EmptyFrameAllocator into create_example_mapping. The page is then converted to a raw and offset by 400 (to account for the VGA buffer's new line) and we volatile write New! to the VGA buffer.

commit e1c6eaca9af63320a16d71aaec351cf488a1b980
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 14 19:01:58 2021 -0700

    create_example_mapping requires a type that impl FrameAllocator, so we create a unit struct with a function that returns None as a dummy case.

commit 32f5489929ed88734ddd96cc993fa63be06f2d1c
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 14 18:23:47 2021 -0700

    To create a new mapping, we will use the Mapper trait's map_to function. As an example implementation we create the create_example_mapping function. It takes a page to be mapped, a mutable reference to an OffsetPageTable, and a frame allocator that is generic over all types that impl FrameAllocator, with a generic of Size4KiB. We then pass these to map_to with some flags.

commit c1a4f146ab6279e0b01802614e9ae69ba8d58005
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 14 18:08:18 2021 -0700

    Removing translate_addr and translate_addr_inner from memory.rs as their functionality is now covered by MappedPageTable.

commit fa4bfcd440501ea2eec1d8d9a46cb3bc873d647d
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 14 18:06:19 2021 -0700

    replacing our translate_addr with x86_64's Translate::translate_addr, initializing a mapper then calling its translate_addr function.

commit 2eba240d1ac11690ef6686fbea69e1d61a1f5975
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 14 18:04:29 2021 -0700

    Updating x86_64 crate to accommodate changes to paging functionality needed for address translation functionality

commit 75cf416dfe88e8bea3096a247ecd1a9b844ba4f7
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 14 17:25:46 2021 -0700

    x86_64 provides virtual to physical address translation with Mapper and Translate traits, and various types to implement these traits with different requirements. We can use the OffsetPageTable type because we have mapped the complete physical memory to virtual memory. We can initialize it with an init function that constructs an OffsetPageTable. The constructor takes a reference to the level 4 table (which we provide by calling our active_level_4_table function), and also takes the physical memory offset. We also remove active_level_4_table's pub specifier to ensure it cannot be called multiple times, and can only be called via our new init function.

commit e28ff023f9c6008075fbbddbf5c9fd5123a5c604
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 16:35:11 2021 -0800

    Testing virtual to physical address translation function.

commit 276c455022c09c4561f1dc8f24e5a3e336c7a46a
Merge: efe516b aede3cd
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 16:26:53 2021 -0800

    Merge branch 'main' of https://github.com/NickSchmitt/RustOS into main

commit efe516bdb6df2686721ada2cfa08159f2f17b42d
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 16:25:15 2021 -0800

    Implementing the private, internal, safe function to translate a virtual address to a physical address. We read the frame from Cr3 register, compute all four page table indexes with premade VirtAddr methods e.g. p1_index(), traverse the tables with a for loop, using the frame variable to point to page table frames, and eventually the mapped frame after traversing the level 1 table. We use a match statement to handle mapped frames, empty frames, and huge frames.

commit aede3cd46ff6d4b074231508c1abbeeef5192b13
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 16:25:15 2021 -0800

    Implementing the private, internal, safe function to translate a virtual address to a physical address. We read the frame from Cr3 register, compute all four page table indexes with premade VirtAddr methods e.g. p1_index(), traverse the tables with a for loop, using the frame variable to point to page table frames, and eventually the mapped frame after traversing the level 1 table. We use a map statement to handle mapped frames, empty frames, and huge frames.

commit 5834c4778ede846200063265e537df29823dbc3b
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 16:13:58 2021 -0800

    Creating a function to translate virtual to physical address, by traversing the four page tables to get the mapped frame. Rather than implement it in the unsafe translate_addr, we simply forward the function to the safe translate_addr_inner to limit the unsafe scope.

commit 6a579a41ee1c5c26d80d719b97cbf0c890d33f32
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 16:02:08 2021 -0800

    Traverse the page tables further by grabbing the entry's physical address and looping through entries in the level 3 table.

commit 0831de57ac7bbffa0dec3a4da9715a36835d59a2
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 15:56:57 2021 -0800

    Create a virtaul address with the physical memory offset, pass it to the level 4 table, then print non-empty table entries.

commit f86516b8ded8c3d2cfb40b50240b11c094e70b10
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 15:40:18 2021 -0800

    Create an active_level_4_table function that returns a reference to the active level 4 page table. Unsafe because caller must guarantee physical memory is mapped to virtual memory, and because the function must only be called once to avoid aliasing &mut references (which is undefined behavior). We read the physical frame from CR3 register, then combine it with the offset to get the virtual address. Then we convert the virtual address to a raw pointer and create a reference from it. This will allow us to print entries of the level 4 table."

commit 017dff42e4bebb0f9ddb211418543783c07ea559
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 15:34:35 2021 -0800

    Changing the lib.rs tests to use entry_point! macro.

commit 4cac70f17643eabd1c9542b0df7bf77a0ac9e1f9
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 15:32:16 2021 -0800

    _start was called externally from the bootloader, so no typechecking occurs. We can replace _start with the entry_point! macro provided by bootloader to do type-checking and prevent arbitrary arguments from being passed to the function.

commit 7458a43b0d9f88fd560d25303354a5f016eacd2a
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 13 15:28:56 2021 -0800

    Passing the BootInfo struct to the kernel, with two fields: memory_map and physical_memory_offset. memory_map provides information on available physical memory, physical_memory_offset provides the virtual start address, which allows us to access physical memory.

commit 632b930ba677662c4137b54dc252e2fb7ce5db38
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Mar 11 21:06:28 2021 -0800

    Adding a feature to the bootloader that maps the complete physical memory to unused virtual memory address range.

commit 24f5279ec8048acadfde60cf7b305e518c2082ba
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Mar 10 20:26:07 2021 -0800

    Using the Cr3::read function to return the currently active level 4 page table from the CR3 register. This shows us how it's mapped to a physical address at 0x1000.

commit 5bde21d7136df1686084c912f4d446ef1c8f71ee
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Mar 10 20:18:50 2021 -0800

    Successfully reading read-only code pages but causing a page fault by attempting to write to the read-only code page

commit 410c569da1e1828cafa4c83b3080d0793cd6b9cd
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Mar 10 20:12:56 2021 -0800

    Triggering a page fault by attempting to access memory outside the kernel

commit 49ce9dd450c577f882a2bd2a3ab08fef1f204aca
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Tue Mar 9 20:03:38 2021 -0800

    Adding a page fault handler to our interrupt descriptor table

commit 88f6c47d617b4f38ce2aabbad277dbad0f0ca80f
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 18:55:12 2021 -0800

    Instead of manually converting all keyboard scancodes, we use the pc-keyboard crate for translation. First we create a static Keyboard object protected by a Mutex lock, specifying a US keyboard layout and scancode set 1. Ignore HandleControl to prevent mapping ctrl+[a-z] to Unicode chars. After creating the keyboard object, we specify that on interrupt, we lock the Mutex, read the scancode, then pass it to Option<KeyEvent>, which specifies which key and whether it was a press or release. process_keyevent translates the key event.

commit 8041d1d862ddcfddfda38a359eb57e257d68eecc
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 18:46:43 2021 -0800

    Converting all numbers in IBM XT scancode mapping standard to the numbers themselves.

commit 20b125c7f62ac1da59808301a4b82099b0d78f08
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 18:39:17 2021 -0800

    To grab data about which key was pressed, we read the data port of the keyboard controller (port number 0x60) which produces a scancode, a number that represents the  pressed key.

commit 18ac5394fcd360da03ba63b2b0b342a5e595f036
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 18:30:18 2021 -0800

    Create handler function for keyboard interrupts and add it to the Interrupt Descriptor Table (IDT). No need to specify a custom discriminant value in the InterruptIndex for Keyboard because it defaults to the value after the previous custom discriminant value, making Keyboard 33, which aligns with its PICS value of 1 (offset by 32).

commit 36358b3386900bc93140d9ccbdceeb5cb68730f6
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 18:21:58 2021 -0800

    Replacing standard loop with newly created hlt_loop in main and lib functions

commit 9ee90755a36cdd910f1f05c7b7d15cc8a2322048
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 18:19:38 2021 -0800

    Modifying the start loop, which causes the CPU to work at full speed even without interrupts to process. Instead using hlt, which is a thin wrapper around the hlt assembly instruction, which halts the CPU until the next interrupt, conserving energy.

commit 113fd56a6693879e9cc4e1add11e30d3cabf5214
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 18:13:16 2021 -0800

    Fixed race condition between test_println_output and the timer handler. Before, the test printed to VGA buffer then checked output, but timer interrupt hanlder may run in between. Instead we 1) Keep the writer locked, 2) Use writeln which allows printing to an already locked writer, 3) Disable interrupts for test duration, and 4) Prepend a newline prior to the test to prevent the timer handler's prints from spoiling the test's prints.

commit 54b60f15de9061b1c5e6f0e1bb6f047f142903cb
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 17:59:51 2021 -0800

    Also applying the deadlock fix to the serial printing function.

commit 4dc1ac70230b4e837d69ae4fcf95b93ccb532be1
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Mar 8 17:57:57 2021 -0800

    Fix the deadlock with without_interrupts, which ensures that interrupts can't occur while the Mutex is locked.

commit a22a58578fb89a9565b60d00d7fff0ef76192f74
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Mar 7 21:30:40 2021 -0800

    provoking a deadlock by adding a print interrupt while the WRITER is locked

commit 04ab6c0694caca4ae957602a58ca9a897df674cc
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 6 18:22:23 2021 -0800

    Sending an explicit end of interrupt (EOI) signal to the PIC so that it can move on.

commit 13fa1513dee2ef699ae53ef9bf918bf5a0ef59da
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 6 18:07:08 2021 -0800

    Add a handler function for the timer interrupt. Using syntactic sugar provided by the IndexMut trait to dynamically access idt[InterruptIndex::Timer.asusize()] and change it with .set_handler_fn()

commit f37c0133d878ebd26977eb95bca744308a4dfdce
Merge: e9b30e6 7e62524
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 6 17:51:02 2021 -0800

    Merge branch 'main' of https://github.com/NickSchmitt/RustOS into main

commit e9b30e6c26deac01dec8df0f17d57e8e068f3880
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 6 17:50:33 2021 -0800

    Using a C-like enum with a custom discriminant value defined by the PIC_1_OFFSET variable to define it as interrupt 32 (PIC 0 + offset 32).

commit bad393791502b1a8d026fe6487924a9241e4e041
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 6 17:41:11 2021 -0800

    Enabling interrupts to reach the CPU with interrupts::enable from x86_64 crate with sti (set interrupts). Though now receiving a double fault because the hardware timer is enabled so timer interrupts are received, which don't have a handler function defined yet.

commit 7e625248156af9395c155b4c203f1c1c5c137049
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Mar 6 17:41:11 2021 -0800

    Enabling interrupts to reach the CPU with interrupts::enable from x86_64 crate with sti (set interrupts).

commit ac716f64c982c4f2064f13d93e3cbf421bc3302a
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Mar 4 18:56:36 2021 -0800

    Code cleanup

commit 7793f12c9b17023ce3c54bdf41d30589e0204ea4
Merge: 1d12d32 2d01e6e
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Mar 4 18:41:25 2021 -0800

    Merge branch 'main' of https://github.com/NickSchmitt/RustOS into main

commit 1d12d329c7b849958d12bccbeafb68855c48b47f
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Feb 28 18:40:06 2021 -0800

    Implementing the 8259 PIC (programmable interrupt controller) for hardware interrupts by remapping PIC interrupts to 32-47 so that they don't overlap with exceptions in the IDT

commit 2d01e6e8cb37b2e1a3a9c16c0c8a4de78f67c153
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Mar 4 17:38:48 2021 -0800

    Implementing the 8259 PIC (programmable interrupt controller) for hardware interrupts by remapping PIC interrupts to 32-47 so that they don't overlap with exceptions in the IDT

commit 809a8e3440aa98f4779769a1d9fbc65e176887ec
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Feb 24 22:16:09 2021 -0800

    Double fault stack overflow integration test handler

commit b850d9087199cc6b5d576bee53702e2aaa81bcff
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Feb 24 22:11:54 2021 -0800

    Double fault stack overflow integration test interrupt descriptor table (IDT) implementation

commit 8eb97656b7a38601bc0cc08f3ec80805603a20d6
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Feb 24 21:54:39 2021 -0800

    Double fault stack overflow integration test _start function implementation

commit 28e0b8328036a5cf8cd3664386d6b8f24fbebb81
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Feb 24 21:49:39 2021 -0800

    Double fault stack overflow integration test setup

commit 672cb504473eee19ffdedefb342a4fb04af3d53d
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Tue Feb 23 21:00:00 2021 -0800

    Stack switching on double fault exceptions for stack overflow with task state segment (TSS), interrupt stack table (IST), and the global descriptor table (GDT).

commit 42550c2a39a9c6602c5f1c3ad1554a484b60b185
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Feb 22 18:03:15 2021 -0800

    Double Fault Handling: Creating a Task State Segment that contains a separate double fault stack in its IST.

commit aa7cc45dbe9bdf6e52217b1f7e3701903102ec94
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Feb 21 21:34:24 2021 -0800

    Double Fault Header

commit 0724ee09579e3474c01ddedc88699b08ecd0982e
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Feb 21 21:27:50 2021 -0800

    Triggering a Double Fault

commit f42d91e19c7c0c81846fef0548d3fb45f58b3236
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Feb 21 21:18:44 2021 -0800

    breakpoint exception test

commit 4cf707a3fb00d7f3a0d11e162e768360df79d8a6
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sun Feb 21 21:11:40 2021 -0800

    calling init_idt from main.rs with an init function in lib.rs

commit 1738497edef015caaed5015daedaf0464e0bbeb6
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Feb 4 08:56:46 2021 -0800

    triggering a double fault with an unhandled page fault

commit 2c6b1ce8717677f4bb2023fdf5bf76e305351bc9
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Feb 3 21:58:15 2021 -0800

    CPU Exception Handling, Interruptor Descriptor Table, Testing

commit f40701f615353a85d05edf1a957f94cb9f2a6a9f
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Tue Feb 2 17:43:58 2021 -0800

    VGA buffer unit testing & integration testing

commit fefe59b1df828a0403c6a75d0383cb4c9a0d398e
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Feb 1 19:56:51 2021 -0800

    testing and printing to console

commit bd8f33872a96fdf88f263859e57e269ba73a0410
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Jan 28 14:12:08 2021 -0800

    print_something cleanup

commit 21b89a2d41faa531501d657cde9c42f4fb15ed13
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Wed Jan 27 21:16:55 2021 -0800

    creating a global interface with Writer instance, WRITER static and print macros

commit 64ebe36663925838d445b89bf37f54fbfd04e634
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Sat Jan 23 17:54:54 2021 -0800

    adding new line and clear row functionality

commit 9d2b4e0f926403c89a01e81fdae7fa9240d5945a
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Thu Jan 14 14:56:04 2021 -0800

    volatile and formatting macros

commit 51ae0db53f2578f98c4ba8d13f57ec1839ba5088
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Tue Jan 12 21:58:41 2021 -0800

    vga buffer

commit 836d7ba42a5bb9d23c484393dea58d128005b201
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Jan 11 18:03:25 2021 -0800

    read me

commit 2dfd38cb1c06328852f1abef95e8014905ff6154
Merge: e643aad d41e2d5
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Jan 11 18:02:14 2021 -0800

    read me

commit e643aadcad86d593ac72122130fb62c2004e87e2
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Jan 11 15:38:32 2021 -0800

    VGA Buffer

commit d41e2d5dc38ea35e33986281a1b0b31638969247
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Jan 11 15:38:32 2021 -0800

    VGA Buffer

commit 603f9c7b3e5a9a1b125f1747ff7942ca2ec00ed8
Author: nickschmitt <nickschmitt@gmail.com>
Date:   Mon Jan 11 15:35:39 2021 -0800

    VGA Buffer
