[package]
name = "blog_os"
version = "0.1.0"
authors = ["nickschmitt <nickschmitt@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

# Profile for `cargo build`
[profile.dev]
panic = "abort" # disable stack unwinding on panic

# Profile for `cargo build --release`
[profile.release]
panic = "abort" # disable stack unwinding on panic

[dependencies]

bootloader = "0.9.8" # Adding the bootloader as dependency is not enough to actually create a bootable disk image. The problem is that we need to link our kernel with the bootloader after compilation, but cargo has no support for post-build scripts. To solve this problem, we created a tool named bootimage that first compiles the kernel and bootloader, and then links them together to create a bootable disk image. To install the tool, execute the following command in your terminal: `cargo install bootimage`

volatile = "0.2.6" #Used for volatile writes to the VGA buffer 
spin = "0.5.2" #In std, mutex blocks threads when resources are already lost. Since we don't have access to std, we use spinlocks, which cause threads to wait in a loop, repeatedly checking if the lock is available. This will give interior mutability to the static WRITER

# statics are usually initialized at compile time (normal variables at runtime). lazy_static! macro allows us to lazily init static at runtime.
[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"]