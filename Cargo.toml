[package]
name = "blog_os"
version = "0.1.0"
authors = ["nickschmitt <nickschmitt@gmail.com>"]
edition = "2018"

[[test]]
name = "should_panic"
harness = false

[[test]]
name = "stack_overflow"
harness = false

# Profile for `cargo build`
[profile.dev]
# panic = "abort" # disable stack unwinding on panic | disabled because it conflicts with testing

# Profile for `cargo build --release`
[profile.release]
# panic = "abort" # disable stack unwinding on panic | disabled because it conflicts with testing

[dependencies]

bootloader = { version = "0.9.8", features = ["map_physical_memory"] } # Adding the bootloader as dependency is not enough to actually create a bootable disk image. The problem is that we need to link our kernel with the bootloader after compilation, but cargo has no support for post-build scripts. To solve this problem, we created a tool named bootimage that first compiles the kernel and bootloader, and then links them together to create a bootable disk image.

volatile = "0.2.6" # Used for volatile writes to the VGA buffer 
spin = "0.5.2" # In std, mutex blocks threads when resources are already lost. Since we don't have access to std, we use spinlocks, which cause threads to wait in a loop, repeatedly checking if the lock is available. This will give interior mutability to the static WRITER

x86_64 = "*"

uart_16550 = "0.2.0"

pic8259_simple = "0.2.0"

pc-keyboard = "0.5.0"

linked_list_allocator = "0.8.0"

# statics are usually initialized at compile time (normal variables at runtime). lazy_static! macro allows us to lazily init static at runtime.
[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"]

[package.metadata.bootimage]
test-args = [
    "-device",
    "isa-debug-exit,iobase=0xf4,iosize=0x04",
    "-serial",
    "stdio",
    "-display",
    "none",
]
test-success-exit-code = 33
test-timeout = 100
